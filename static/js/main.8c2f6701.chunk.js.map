{"version":3,"sources":["contexts/SocketProvider.js","util/checkInput.js","components/Login.js","components/SidebarCreateChannel.js","contexts/ChannelProvider.js","components/ChannelList.js","components/SidebarLoginCard.js","components/Sidebar.js","util/acceptedFiles.js","components/MessageCard.js","components/UserJoin.js","components/Conversations.js","util/checkMessage.js","img/chatnow.png","components/Main.js","components/Dashboard.js","App.js","index.js"],"names":["SocketContext","React","createContext","useSocket","useContext","SocketProvider","id","setId","children","useState","socket","setSocket","channels","setChannels","createIDError","setCreateIDError","changeIDError","setChangeIDError","useEffect","newSocket","io","query","on","arg","type","data","message","localStorage","getItem","user","JSON","parse","emit","name","uniqueID","status","setItem","stringify","account","removeItem","window","location","reload","close","Provider","value","checkIDInput","input","trim","length","valid","error","match","Login","idRef","useRef","errors","setErrors","hasUser","className","onSubmit","event","preventDefault","current","uuidv4","prevErr","Set","handleSubmit","ref","required","onClick","continueLogin","map","i","SidebarCreateChannel","channelRef","action","channel","createRoom","placeholder","ChannelContext","useChannels","ChannelProvider","currentChannel","setCurrentChannel","changeChannel","ChannelCard","setSidebarOpen","innerWidth","ChannelList","item","SidebarLoginCard","editID","setEditID","display","prevName","newName","handleChangeID","defaultValue","cardBtnGrp","handleReset","Sidebar","sidebarOpen","ACCEPT_FILES","MessageCard","messageContent","content","filename","timestamp","hasOwnProperty","download","href","src","alt","slice","url","controls","moment","Date","calendar","now","UserJoin","userJoin","Conversations","conversations","setConversations","hasFile","setHasFile","convoRef","contentRef","fileRef","scrollTop","scrollHeight","files","reader","FileReader","onload","readFile","result","toString","readAsDataURL","handleSend","htmlFor","accept","onChange","handleFileChange","disabled","Main","chatnow","Dashboard","addEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c2f6701.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext();\n\nexport function useSocket() {\n    return useContext(SocketContext);\n}\n\nexport const SocketProvider = ({ id, setId, children }) => {\n    \n    const [socket, setSocket] = useState();\n    const [channels, setChannels] = useState([]);\n    const [createIDError, setCreateIDError] = useState(null);\n    const [changeIDError, setChangeIDError] = useState(null);\n\n    useEffect(() => {\n     \n        // SERVER_URL\n        // const SERVER_URL = \"http://localhost:5000\";\n        const SERVER_URL = \"https://g2chat2.herokuapp.com/\";\n\n        // Create a new Socket\n        const newSocket = io(\n            SERVER_URL,\n            { query: { id } }\n        );\n\n        // Set current socket\n        setSocket(newSocket);\n\n        newSocket.on(\"server_message\", arg => {\n            if (arg.type === \"SUCCESS\") {\n\n                if (arg.data.message === \"ID created successfully.\") {\n\n                    // Delete previous record\n                    if (localStorage.getItem(`g2Chat-user`)) {\n\n                        let user = JSON.parse(localStorage.getItem(`g2Chat-user`));\n                        newSocket.emit(\"delete_id\", { name: user.id, uniqueID: user.uniqueID, status: \"new_login\" });\n                    }\n\n                    // Store user data to localstorage\n                    localStorage.setItem(`g2Chat-user`, JSON.stringify({\n                        id: arg.data.account.id,\n                        uniqueID: arg.data.account.uniqueID\n                    }));\n\n                    // Reset createIDError\n                    setCreateIDError(null);\n\n                    // Set current ID\n                    setId(arg.data.account.id);\n\n                } else if (arg.data.message === \"ID removed successfully.\") {\n                    localStorage.removeItem(`g2Chat-user`);\n                    setId(null);\n                    window.location.reload();\n                } else if (arg.data.message === \"ID name changed successfully.\") {\n                    // Store user data to localstorage\n                    localStorage.setItem(`g2Chat-user`, JSON.stringify({\n                        id: arg.data.account.id,\n                        uniqueID: arg.data.account.uniqueID\n                    }));\n\n                    // Set current ID\n                    setId(arg.data.account.id);\n\n                    // Remove name change error\n                    setChangeIDError(null);\n                } \n\n            } else if (arg.type === \"ERROR\") {\n                if (arg.data.message === \"ID and uniqueID does not match.\") {\n                    setChangeIDError(arg.data.message);\n                } else {\n                    setCreateIDError(arg.data.message);\n                }\n            }\n\n        });\n\n        newSocket.on(\"all_channels\", arg => {\n            setChannels(arg);\n        })\n\n        // Whenever useEffect runs the second time,\n        // The old socket needs to be removed\n        // Close the old socket to prevent multiple connections to the server\n        return () => newSocket.close();\n\n    }, [id, setId])\n\n    return (\n        <SocketContext.Provider value={{ socket, channels, createIDError, changeIDError }}>\n            {children}\n        </SocketContext.Provider>\n    )\n}\n\nexport default SocketProvider;","export function checkIDInput(input) {\n    \n    if (input.trim() === \"\" || input.trim().length < 5) {\n        return { valid: false, error: \"ID must contain at least 5 characters.\" };\n    }\n\n    if (input.trim().length > 20) {\n        return { valid: false, error: \"ID must not exceed 20 characters.\" };\n    }\n\n    if (input.trim().match(/[^a-zA-Z0-9]/)) {\n        return { valid: false, error: \"ID must contain only numbers and/or letters.\" };\n    }\n\n    return { valid: true, error: null };\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSocket } from \"../contexts/SocketProvider\";\n\nimport { checkIDInput } from \"../util/checkInput\";\n\nconst Login = () => {\n\n    const idRef = useRef();\n    const [errors, setErrors] = useState([]);\n    const { socket, createIDError } = useSocket();\n    const hasUser = localStorage.getItem(\"g2Chat-user\") ? true : false;\n\n    useEffect(() => {\n        if (createIDError) {\n            setErrors([createIDError]);\n        }\n    }, [createIDError, setErrors])\n\n    function continueLogin() {\n        let user = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n\n        socket.emit(\"continue_login\", { name: user.id, uniqueID: user.uniqueID });\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        let input = idRef.current.value;\n\n        const { valid, error } = checkIDInput(input);\n        \n        if (!valid) {\n            setErrors(prevErr => [...new Set([...prevErr, error])]);\n            return;\n        }\n\n        let uniqueID = uuidv4();\n\n        socket.emit(\"create_id\", { name: input, uniqueID });\n    }\n\n    return (\n        <div id=\"login\" className=\"login\">\n            <div id=\"loginLogo\" className=\"loginLogo\">\n                <h1 className=\"loginLogo-h1\">g2Chat</h1>\n            </div>\n            <form className=\"loginForm\" onSubmit={(event) => handleSubmit(event)}>\n                <h1 className=\"loginForm-h1\">Create an ID</h1>\n                <input className=\"input-01 mv-10\" type=\"text\" ref={idRef} required></input>\n                <button className=\"button-01\" type=\"submit\">Chat with new ID</button>\n                {hasUser && (\n                    <h1 className=\"loginForm-h1\">or</h1>\n                )}\n                {hasUser && (\n                    <button type=\"button\" className=\"button-01 mt-5\" onClick={()=>continueLogin()}>\n                        Resume Session as {JSON.parse(localStorage.getItem(\"g2Chat-user\")).id}\n                    </button>\n                )}\n                {errors.length > 0 && (\n                    <ul className=\"loginForm-errorbox\">\n                      {errors.map((error, i) => <li key={`loginformerror${i}`} className=\"loginForm-error\">{error}</li>)}\n                    </ul>    \n                )}\n            </form>\n        </div>\n    )\n}\n\nexport default Login;","import React, { useRef } from 'react';\nimport { useSocket } from \"../contexts/SocketProvider\";\n\nconst SidebarCreateChannel = ({ id }) => {\n\n    const channelRef = useRef(null);\n    const { socket } = useSocket();\n\n    function createRoom(event) {\n\n        // Prevent default\n        event.preventDefault();\n\n        // Create a channel on server\n        socket.emit(\"channel\", { action: \"create_channel\", data: { channel: channelRef.current.value, id } });\n\n        // Reset input\n        channelRef.current.value = '';\n    }\n    \n    return (\n        <div id=\"sidebarCreateChannel\" className=\"sidebarCreateChannel\">\n            <form id=\"sidebarCreateChannel-form\" className=\"sidebarCreateChannel-form\" onSubmit={(event)=>createRoom(event)}>\n                <h3 className=\"sidebarCreateChannel-h3\">Create a new Channel</h3>\n                <input className=\"input-01\" type=\"text\" placeholder=\"Create a channel...\" ref={channelRef} required></input>\n                <button className=\"button-01 mt-5\">Create</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SidebarCreateChannel;","import React, { useContext, useState } from 'react';\nimport { useSocket } from './SocketProvider';\n\nconst ChannelContext = React.createContext();\n\nexport function useChannels() {\n    return useContext(ChannelContext);\n}\n\nexport const ChannelProvider = ({ children }) => {\n    \n    const { socket } = useSocket();\n    \n    const [currentChannel, setCurrentChannel] = useState(null);\n\n    function changeChannel({ channel, id }) {\n\n        // Cannot join currentChannel\n        if (channel === currentChannel) return;\n        \n        // Change server\n        // socket.emit(\"change_channel\", { channel, id })\n        socket.emit(\"channel\", { action: \"change_channel\", data: { channel, id } });\n\n        // Set current channel\n        setCurrentChannel(channel);\n    }\n\n    return (\n        <ChannelContext.Provider value={{ currentChannel, changeChannel }}>\n            {children}\n        </ChannelContext.Provider>\n    )\n}\n\nexport default ChannelProvider;","import React from 'react';\nimport { useChannels } from \"../contexts/ChannelProvider\"; \nimport { useSocket } from '../contexts/SocketProvider';\n\nconst ChannelCard = ({ id, channel, setSidebarOpen }) => {\n\n    const { changeChannel } = useChannels();\n\n    function handleClick() {\n        changeChannel({ channel, id });\n        if (window.innerWidth < 600) {\n            setSidebarOpen(false);\n        }\n    }\n\n    return (\n        <div id={`channelCard-${channel}`} className=\"channelCard\" onClick={()=>handleClick()}>\n            <p className=\"channelCard-p\">{channel}</p>\n        </div>\n    )\n}\n\nconst ChannelList = ({ id, setSidebarOpen }) => {\n\n    const { channels } = useSocket();\n\n    return (\n        <div className=\"channelList\">\n            <div className=\"channelListTitle\">\n                <h2 className=\"channelListTitle-h2\">\n                    Channels\n                </h2>\n            </div>\n            <div className=\"channelListCon\">\n                {channels.map(item => (\n                    <ChannelCard key={`channelcard${item}`} channel={item} id={id} setSidebarOpen={setSidebarOpen} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default ChannelList;","import React, { useEffect, useState, useRef } from 'react';\nimport { useSocket } from \"../contexts/SocketProvider\";\nimport { useChannels } from \"../contexts/ChannelProvider\";\nimport { checkIDInput } from \"../util/checkInput\";\n\nconst SidebarLoginCard = ({ id, uniqueID, setId }) => {\n    \n    const idRef = useRef();\n    const [editID, setEditID] = useState(false);\n    const [errors, setErrors] = useState([]);\n    const { socket, changeIDError } = useSocket();\n    const { currentChannel } = useChannels();\n\n    useEffect(() => {\n        if (changeIDError) setEditID(true);\n    }, [changeIDError])\n\n    function handleReset(event) {\n        event.preventDefault();\n        localStorage.removeItem(\"g2Chat-user\");\n        socket.emit(\"delete_id\", { name: id, uniqueID });\n        window.location.reload();\n    }\n\n    function handleChangeID(event) {\n        event.preventDefault();\n        \n        const { valid, error } = checkIDInput(idRef.current.value);\n\n        if (!valid) {\n            setErrors(error);\n            return;\n        }\n\n        const { id, uniqueID } = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n\n        socket.emit(\"change_id\", { prevName: id, newName: idRef.current.value, uniqueID, channel: currentChannel })\n\n        idRef.current.value = '';\n        setEditID(false);\n\n    }\n    \n    let display = editID\n        ?   (\n            <form className=\"sidebarLoginCard-form\" onSubmit={(event)=>handleChangeID(event)}>\n                <input type=\"text\" className=\"sidebarLoginCard-form-input\" placeholder=\"Enter your ID...\" defaultValue={id} ref={idRef} />\n                {errors && <p className=\"sidebarLoginCard-form-error\">{errors}</p>}\n                {changeIDError && <p className=\"sidebarLoginCard-form-error\">{changeIDError}</p>}\n                <div className=\"sidebarLoginCard-form-btngrp\">\n                    <button className=\"sidebarLoginCard-form-btn\" onClick={()=>setEditID(false)}>Cancel</button>\n                    <button className=\"sidebarLoginCard-form-btn\" type=\"submit\" >Submit</button>\n                </div>\n            </form>\n        )\n        :   (\n            <p className=\"sidebarLoginCard-p\">\n                { id }\n            </p>\n        );\n\n    let cardBtnGrp = !editID && (\n        <div className=\"sidebarLoginCard-btngrp\">\n                <button className=\"sidebarLoginCard-btn\" onClick={()=>setEditID(true)}>\n                    <p>Change ID</p>\n                </button>\n                <button className=\"sidebarLoginCard-btn sidebarLoginCard-btn-reset\" onClick={(event)=>handleReset(event)}>\n                    <p>Reset</p>\n                </button>\n            </div>\n    ) \n\n    return (\n        <div className=\"sidebarLoginCard\">\n            <h2 className=\"sidebarLoginCard-h2\">\n                Your ID\n            </h2>\n            {display}\n            {cardBtnGrp}\n        </div>\n    )\n}\n\nexport default SidebarLoginCard;","import React from 'react';\nimport SidebarCreateChannel from \"./SidebarCreateChannel\";\nimport ChannelList from './ChannelList';\nimport SidebarLoginCard from './SidebarLoginCard';\n\nconst Sidebar = ({ sidebarOpen, setSidebarOpen, setId }) => {\n\n    let user = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n\n    return (\n        <div id=\"sidebar\" className=\"sidebar\">\n            {sidebarOpen && <button className=\"sidebar-btn\" onClick={()=>setSidebarOpen(false)}><i className=\"fas fa-times\"></i></button>}\n            <div id=\"sidebarLogo\" className=\"sidebarLogo\">\n                <i className=\"far fa-comment-dots\"></i>\n                <h1 className=\"sidebarLogo-h1\">g2Chat</h1>\n            </div>\n            <SidebarCreateChannel id={ user.id } />\n            <SidebarLoginCard id={ user.id } uniqueID={user.uniqueID} setId={ setId }/>\n            <ChannelList id={ user.id } setSidebarOpen={setSidebarOpen} />\n        </div>\n    )\n}\n\nexport default Sidebar;","export const ACCEPT_FILES = {\n    \"application/pdf\": \"fas fa-file-pdf messageCard-file-pdf\", \n    \"application/msword\": \"fas fa-file-word messageCard-file-word\", \n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"fas fa-file-word messageCard-file-word\",\n    \"application/vnd.ms-powerpoint\": \"fas fa-file-powerpoint\",\n    \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": \"fas fa-file-powerpoint\",\n    \"application/vnd.ms-excel\": \"fas fa-file-excel messageCard-file-xls\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"fas fa-file-excel messageCard-file-xls\",\n    \"application/zip\": \"fas fa-file-archive messageCard-file-normal\",\n    \"application/vnd.rar\": \"fas fa-file-archive messageCard-file-normal\",\n    \"text/csv\": \"fas fa-file-csv messageCard-file-normal\",\n}","import React from 'react';\nimport moment from \"moment\";\nimport ReactPlayer from \"react-player\";\nimport { ACCEPT_FILES } from '../util/acceptedFiles';\n\nconst MessageCard = ({ message: { id, uniqueID, type, content, filename, timestamp } }) => {\n    \n    const user = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n\n    let messageContent;\n\n    if (ACCEPT_FILES.hasOwnProperty(type)) {\n        messageContent = (\n            <a download={filename} className=\"messageCard-file\" href={content}>\n                <i className={`messageCard-file-i ${ACCEPT_FILES[type]}`}></i>\n                <p className=\"messageCard-file-p\">{filename}</p>\n            </a>\n            )\n    } else if (type === \"image/jpeg\" || type === \"image/jpg\" || type === \"image/png\" || type === \"image/svg\" || type === \"image/gif\") {\n        messageContent = <img src={content} alt=\"message\" className=\"messageCard-img\"></img>;\n    } else {\n        messageContent = content.slice(0, 8) === \"https://\"\n            ? content.slice(0, 17) === \"https://youtu.be/\" || content.slice(0, 24) === \"https://www.youtube.com/\"\n                ? <ReactPlayer className=\"messageCard-vid\" url={content} controls={true} />\n                : <a className=\"messageCard-text\" href={content}>{content}</a>\n            : <p className=\"messageCard-text\">{content}</p>\n    }\n\n    return (\n        <div className={ user.uniqueID === uniqueID ? \"messageCard messageCard-user\" : \"messageCard\"}>\n            <div className=\"messageCard-upper\">\n                <p className=\"messageCard-user\">\n                    {id}\n                </p>\n                { messageContent }\n                <p className=\"messageCard-timestamp\">\n                    {moment(new Date(timestamp)).calendar(Date.now())}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default MessageCard;","import React from 'react';\nimport moment from \"moment\";\n\nconst UserJoin = ({ message: {userJoin, timestamp} }) => {\n    return (\n        <div className=\"userJoin\">\n            <p className=\"userJoin-user\">\n                {userJoin}\n            </p>\n            <p className=\"userJoin-timestamp\">\n                {moment(new Date(timestamp)).calendar(Date.now())}\n            </p>\n        </div>\n    )\n}\n\nexport default UserJoin;","import React, { useEffect, useState, useRef } from 'react';\nimport { useSocket } from \"../contexts/SocketProvider\";\nimport { ACCEPT_FILES } from '../util/acceptedFiles';\nimport { checkMessage } from '../util/checkMessage';\nimport MessageCard from './MessageCard';\nimport UserJoin from './UserJoin';\n\nconst Conversations = ({ currentChannel, sidebarOpen, setSidebarOpen }) => {\n\n    const { socket } = useSocket();\n    const [conversations, setConversations] = useState();\n    const [hasFile, setHasFile] = useState(false);\n    const convoRef = useRef();\n    const contentRef = useRef();\n    const fileRef = useRef();\n    let filename = '';\n\n    useEffect(() => {\n        socket.on(\"channel_messages\", arg => {\n            setConversations(arg);\n            convoRef.current.scrollTop = convoRef.current.scrollHeight;\n        });\n\n        socket.on(\"user_join_channel\", arg => {\n        });\n\n    }, [socket])\n\n    function handleFileChange() {\n        if (!fileRef.current.value) {\n            contentRef.current.value = '';\n            setHasFile(false);\n            return;\n        }\n        filename = fileRef.current.files[0].name;\n        contentRef.current.value = filename;\n        setHasFile(true);\n    }\n\n    function handleSend(event) {\n\n        event.preventDefault();\n\n        const { id, uniqueID } = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n        const type = hasFile ? fileRef.current.files[0].type : \"text\";\n        let content = hasFile ? fileRef.current.files[0] : contentRef.current.value;\n        const channel = currentChannel;\n        \n        // If there's a file, check if the file type is allowed\n        if (hasFile && !ACCEPT_FILES.hasOwnProperty(type) && type !== \"image/png\" && type !== \"image/jpg\") {\n            setHasFile(false);\n            contentRef.current.value = \"\";\n            fileRef.current.value = \"\";\n            return;\n        };\n\n        // Data to be sent\n        const data = {\n            user: { id, uniqueID },\n            type,\n            content,\n            channel\n        };\n\n        if (type === \"text\") {\n            // Send message\n            // Validate message\n            if (!checkMessage(content)) return false;\n\n            data.content = content;\n\n            // Send message\n            socket.emit(\"send_message\", data);\n            \n        } else {\n            // Send Image\n            const reader = new FileReader();\n\n            // Modify reader\n            reader.onload = function() {\n                let readFile = reader.result;\n\n                // Get filename\n                data.filename = content.name;\n                \n                // Convert to base64 format \n                content = readFile.toString(\"base64\");\n                data.content = content;\n                // Send message\n                socket.emit(\"send_message\", data);\n\n                // reset hasfile\n                setHasFile(false);\n            };\n\n            // Read file\n            reader.readAsDataURL(content);\n        }\n\n        // Clear input field\n        contentRef.current.value = \"\";\n        fileRef.current.value = \"\";\n    }\n\n    return (\n        <div className=\"conversations\">\n            {!sidebarOpen && <button className=\"menuToggle\" onClick={()=>setSidebarOpen(true)}><i className=\"fas fa-bars\"></i></button>}\n            <h2 className=\"conversations-title\">{currentChannel}</h2>\n            <div id=\"conversations-dialog\" className=\"conversations-dialog\" ref={convoRef}>\n                {conversations&& conversations.map((message, i) => (\n                    message.userJoin \n                        ? <UserJoin key={`message-${i}`} message={message} /> \n                        : <MessageCard key={`message-${i}`} message={message} />\n                ))}\n            </div>\n            <form className=\"conversations-form\" onSubmit={(event)=>handleSend(event)}>\n                <label htmlFor=\"fileUpload\" className=\"conversations-form-inputfile-label\"><i className=\"fas fa-paperclip\"></i></label>\n                <input id=\"fileUpload\" className=\"conversations-form-inputfile\" type=\"file\" ref={fileRef} accept=\".png,.jpg,.pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.zip,.rar,.csv\" onChange={()=>handleFileChange()}></input>\n                <div className=\"conversations-form-grp\">\n                    <input \n                        className=\"conversations-form-input\" \n                        type=\"text\" \n                        ref={contentRef}\n                        disabled={hasFile}\n                        required={!hasFile}\n                    />\n                    <button className=\"conversations-form-submit\" type=\"submit\"><i className=\"fas fa-paper-plane\"></i></button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Conversations;","export function checkMessage(input) {\n    \n    if (input.trim() === \"\") {\n        return false;\n    }\n\n    if (input.length > 1600) {\n        return false;\n    }\n\n    return true;\n}","export default __webpack_public_path__ + \"static/media/chatnow.b3198a05.png\";","import React from 'react';\nimport Conversations from './Conversations';\nimport { useChannels } from \"../contexts/ChannelProvider\";\n\nimport chatnow from \"../img/chatnow.png\";\n\nconst Main = ({ sidebarOpen, setSidebarOpen }) => {\n\n    const { currentChannel } = useChannels();\n    \n    let display = currentChannel \n        ? <Conversations currentChannel={currentChannel} sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} /> \n        : (\n            <div className=\"noSelectedChannel\">\n                <img src={chatnow} alt=\"chat\" className=\"noSelectedChannel-img\"/>\n                <h3 className=\"noSelectedChannel-h3\">\n                    {!sidebarOpen && <button className=\"menuToggle\" onClick={()=>setSidebarOpen(true)}><i className=\"fas fa-bars\"></i></button>}\n                    Please select a channel to start!\n                </h3>\n            </div>\n          );\n\n    return (\n        <div id=\"main\" className=\"main\">\n            {display}\n        </div>\n    )\n}\n\nexport default Main;","import React, { useEffect, useState } from 'react';\nimport Sidebar from './Sidebar';\nimport Main from \"./Main\";\n\nconst Dashboard = ({ id, setId }) => {\n\n    const [sidebarOpen, setSidebarOpen] = useState(true);\n\n    useEffect(() => {\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 600) {\n                setSidebarOpen(true);\n            } else {\n                setSidebarOpen(false);\n            }\n        })\n    }, [setSidebarOpen])\n\n\n    return (\n        <div id=\"dashboard\" className=\"dashboard\">\n            {sidebarOpen && <Sidebar id={id} setId={ setId } sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />}\n            <Main id={id} sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />\n        </div>\n    )\n}\n\nexport default Dashboard;\n","import './App.css';\nimport { useState } from \"react\";\nimport Login from \"./components/Login\";\nimport Dashboard from './components/Dashboard';\nimport SocketProvider from './contexts/SocketProvider';\nimport ChannelProvider from './contexts/ChannelProvider';\n\nfunction App() {\n\n    const [id, setId] = useState(null);\n    const user = JSON.parse(localStorage.getItem(\"g2Chat-user\"));\n\n    const display = id ? <Dashboard user={user} setId={setId}/> : <Login id={id} setId={setId}/>;\n\n    return (\n        <div className=\"App\">\n            <SocketProvider setId={setId}>\n                <ChannelProvider>\n                    { display }\n                </ChannelProvider>\n            </SocketProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}